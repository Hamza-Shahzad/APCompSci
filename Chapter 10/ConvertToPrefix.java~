//****************************************************************************************
//
// @author: Hamza Shahzad ||| ConvertToPostfix.java
// Converts an infix expression to a prefix expression
//
//****************************************************************************************
import java.util.*;

public class ConvertToPrefix{
  
  public static String convert(String infix){
    
    String infixReal = reverseString(infix);
    Stack stack = new Stack();
    Stack preResult = new Stack();
    
    for(int i = 0; i < infixReal.length(); i++){
      
      if(infixReal.charAt(i) == ')')
        stack.push(infixReal.charAt(i));
      
      else if(infixReal.charAt(i) == '('){
        while(stack.peek() != ')')
          preResult.push(stack.pop());
      }
      
      else if(infix.charAt(i) == '*' || infix.charAt(i) == '/')
        stack.push(infix.charAt(i));
      
      else if(infix.charAt(i) == '+' || infix.charAt(i) == '-'){
        
        if(stack.peek() == '*' || stack.peek() == '/'){
          
          while(stack.peek() != '*' || stack.peek() != '/')
            preResult.push(stack.pop());
        }
        
        stack.push(infix.charAt(i));
      }
      
      else 
        preResult.push(infixReal.charAt(i));
    }
    while(!stack.isEmpty())
      preResult.push(stack.pop());
    
    Object[] objResult = preResult.toArray();
    Character[] charResult = new Character[objResult.length];
    charResult = preResult.toArray(charResult);
    
    String finalResult = new String(charResult);
    
    return finalResult;
  }
      
    
    private static String reverseString(String x){
    String result "";
    
    for(int i = x.length() - 1; i >= 0; i--)
      result += x.charAt(i);
    
    return result;
  }
    
    
    