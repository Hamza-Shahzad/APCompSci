//*********************************************************************************************
//
// @author: Hamza Shahzad ||| GameRewritten.java
// Because I'm bad at making classes, I will rewrite Game top down
//
//*********************************************************************************************

import java.util.*;

public class GameRewritten{
  
  private ArrayList<Player> players;
  private ArrayList<Card> pile;
  
  public GameRewritten(ArrayList<String> names, int numPlayers){
    Player.resetDeck();
    
    pile = new ArrayList<Card>();
    players = new ArrayList<Player>();
    
    for(int i = 0; i < numPlayers; i++)
      players.add( new Player(names.get(i), 52 / numPlayers));
    
  }
  
  public void run(){
    
    while(players.size() > 1){
      
      for(Player x : players){//Takes a top card and prints hand
        pile.add(x.flip());
        
        System.out.print(x.getName() + "'s hand: ");
        x.printHand();
      }
      
      //prints pile
      System.out.print("Trick: ");
      for(Card x : pile)
        System.out.print(x + ", ");
      System.out.println();
      
      int[] coordAndVal = biggestCardInPile(0);
      
      if(coordAndVal[0] != -1){
        players.get(coordAndVal[0]).add(pile);
        removeEmpty();
      }
      
      
      else{
        war();
      }
    }
    
    System.out.println(players.get(0).getName() + " has won!!");
  }
  
  private void war(){
    if(players.size() != 1){
      System.out.println("WAR!!");
      
      
      for(int i = 0; i < players.size(); i++){
        
        for(int j = 0; j < 3; j++){
          Card wantToPutIn = players.get(i).flip();
          
          if(wantToPutIn != null)
            pile.add(wantToPutIn);
          else{
            removeEmpty();
            break;
          }
          removeEmpty();
        }
      }
      for(int i = 0; i < players.size(); i++){
        Card wantToPutIn = players.get(i).flip();
        if(wantToPutIn != null)
          pile.add(wantToPutIn);
        
        
      }
      
      for(Player x : players){//Takes a top card and prints hand
        System.out.print(x.getName() + "'s hand: ");
        x.printHand();
      }
     
      
      System.out.print("Trick: ");
      for(int i = pile.size() - players.size(); i < pile.size(); i++)
        System.out.print(pile.get(i) + ", ");
      System.out.println();
    
    int[] cardIndexAndValue = biggestCardInPile(pile.size() - players.size());
    
    if(cardIndexAndValue[0] != -1){
      int winner = findPlayer(pile.size() - players.size(), cardIndexAndValue[1]);
      players.get(winner).add(pile);
      removeEmpty();
    }
    else
      war();
      
    }
  }
  
    //finds the index of the biggest card in the pile
  //and the largest value, where [1] is the value
  //returns -1 if there are more than one big cards
  private int[] biggestCardInPile(int startingIndex){
    
    int largestIndex = -1;
    int largestValue = 0;
    int[] result = new int[2];
    
    for(int i = startingIndex; i < pile.size(); i++){
      
      
      if(pile.get(i) != null && pile.get(i).getIntFace() == largestValue)
        largestIndex = -1;
      
      else if(pile.get(i) != null && pile.get(i).getIntFace() > largestValue){
        largestIndex = i;
        largestValue = pile.get(i).getIntFace();
      }
    }
    result[0] = largestIndex;
    result[1] = largestValue;
    
    return result;
  }
  
  private void removeEmpty(){
    int leng = players.size();
    
    for(int i = 0; i < players.size(); i++){
      
      if(players.get(i).isHandEmpty()){
        System.out.println(players.get(i).getName() + " has been eliminated.");
        players.remove(players.get(i));
      }
    }
  }
  
  private int findPlayer(int startingPoint, int largestNum){
    int count = 0;//count is the index of the player in ArrayList players
    
    for(int i = startingPoint; i < pile.size(); i++){
      
      if(pile.get(i).getIntFace() != largestNum)
        count++;
    }
    
    return count;
  }
  public static void main(String[] args){
    ArrayList<String> nombres = new ArrayList<String>();
    nombres.add("Hamza");
    nombres.add("Gresham");
    nombres.add("Timmy");
    
    GameRewritten xam = new GameRewritten(nombres, nombres.size());
    xam.run();
  }
}